node ('ubuntu-slave'){
	slackSend (color: "#D1D1D1", message: "$JOB_NAME Pipeline build $BUILD_NUMBER Started")
	try {
		stage('Prepare Environment'){
			sh'''
				rm -rf *
				echo "null" > statusFile
			'''
		}
		stage('Marge'){
			sh '''
				gitlab_url=$(echo $gitlab_repository|awk -F '/' '{print $1}')//$(echo $gitlab_repository|awk -F '/' '{print $3}')
				project_name=$(echo $gitlab_repository|awk -F '/' '{print $5}'|awk -F '.' '{print $1}')
				project_id=""
			
				response=$(curl -s -k --header "PRIVATE-TOKEN: $gitlab_private_token" "$gitlab_url/api/v4/projects")
				for row in $(echo "${response}" | jq -r '.[] | @base64'); do
					_jq() {
					 echo ${row} | base64 --decode | jq -r ${1}
					}
					if [ "$(echo $(_jq '.name'))" = "$project_name" ]; then
						   project_id=$(_jq '.id')
					fi
				done
			
				response=$(curl -s -k --header "PRIVATE-TOKEN: $gitlab_private_token" "$gitlab_url/api/v4/projects/$project_id/merge_requests?scope=all&state=opened&target_branch=master")
				iid=$(echo $response |jq '.[0].iid')
				# project_id=$(echo $response |jq '.[0].project_id')
				source_branch=$(echo $response |jq '.[0].source_branch'| sed -e 's/"//g')
			
				if [ "$iid" = "null" ] || [ "$project_id" = "null" ]
				then
					echo "No Marge Request to marge" > statusFile
					exit 1
				fi

				status_code=$(curl -s -k -o /dev/null -w "%{http_code}\n" --request PUT --header "PRIVATE-TOKEN: $gitlab_private_token" "$gitlab_url/api/v4/projects/$project_id/merge_requests/$iid/merge")
				if [ "$status_code" != "200" ]
				then
					echo "Can not marge to master. Contact cicd Admin" > statusFile
					exit 1
				fi

				# last_tag=$(curl -s --header "PRIVATE-TOKEN: $gitlab_private_token" --request GET $gitlab_url/api/v4/projects/$project_id/repository/tags|jq '.[0].name'| sed -e 's/"//g')
				last_tag="xyz"
				new_tag=$(echo $source_branch| awk -F'/' '{print $2}')
				if [ "$last_tag" != "null" ]
				then
					marge_no=$(curl -s -k --header "PRIVATE-TOKEN: $gitlab_private_token" "$gitlab_url/api/v4/projects/$project_id/merge_requests?scope=all&state=merged&target_branch=master&source_branch=$source_branch"|jq '. | length')
					new_tag=$(echo $new_tag| awk -F'.' '{print $1"."$2}')"."$(echo $(($marge_no-1)))
				fi
				
				status_code=$(curl -s  -o /dev/null -w "%{http_code}\n" --header "Content-Type: application/json" --header "PRIVATE-TOKEN: $gitlab_private_token" --request POST --data '{"tag_name":"'$new_tag'","ref":"master"}' $gitlab_url/api/v4/projects/$project_id/repository/tags)
				if [ "$status_code" != "201" ]
				then
					echo "Can not tag version to master. Contact cicd Admin" > statusFile
					exit 1
				fi
				echo $new_tag > new_tag
			'''
		}
		stage('Clone'){
			sh '''
				new_tag=$(cat new_tag)
				
				gitlab_ip=$(echo $gitlab_repository|awk -F '/' '{print $3}')
				gitlab_http=$(echo $gitlab_repository|awk -F '/' '{print $1}')//
				gitlab_user=$(echo $gitlab_repository|awk -F '/' '{print $4}')
				gitlab_repo_name=$(echo $gitlab_repository|awk -F '/' '{print $5}'|awk -F '.' '{print $1}')
				
				git clone $gitlab_http$gitlab_username:$gitlab_private_token@$gitlab_ip/$gitlab_user/$gitlab_repo_name.git
				cd $gitlab_repo_name
				git checkout tags/$new_tag
			'''
		}
		stage('Build'){
			sh '''
				new_tag=$(cat new_tag)
				gitlab_repo_name=$(echo $gitlab_repository|awk -F '/' '{print $5}'|awk -F '.' '{print $1}')
				docker_registry_ip=$(echo $docker_registry_url|awk -F '/' '{print $3}')
				
				cd $gitlab_repo_name
				gitlab_repo_name=$(echo $gitlab_repo_name| sed -e "s/_/-/g")
				
				args=""

				sed -i 's/[[:space:]]*$//' docker_build_args || true

				if [ -f docker_build_args ]
				then
					if [ -s docker_build_args ]
					then
						for i in $(cat < "docker_build_args"); do
							args=$args" --build-arg $i"
						done
					else
						echo "docker_build_args is empty!"
					fi
				else
					echo "docker_build_args not exists!"
				fi
				
				docker build --no-cache $args -t $docker_registry_ip/$gitlab_repo_name:$new_tag .
				docker build -t $docker_registry_ip/init-cicd-workflow:$new_tag -f dockerfile-initContainer .
			'''
		}
		stage('Push'){
			sh '''
				new_tag=$(cat new_tag)
				gitlab_repo_name=$(echo $gitlab_repository|awk -F '/' '{print $5}'|awk -F '.' '{print $1}'| sed -e "s/_/-/g")
				docker_registry_ip=$(echo $docker_registry_url|awk -F '/' '{print $3}')
				
				docker login $docker_registry_url --username=$docker_registry_username --password=$docker_registry_password
				docker push $docker_registry_ip/$gitlab_repo_name:$new_tag
				docker push $docker_registry_ip/init-cicd-workflow:$new_tag
			'''
        }
		stage('Cleanup'){
			sh '''
				new_tag=$(cat new_tag)
				gitlab_repo_name=$(echo $gitlab_repository|awk -F '/' '{print $5}'|awk -F '.' '{print $1}')
				docker_registry_ip=$(echo $docker_registry_url|awk -F '/' '{print $3}')
				
				rm -rf $gitlab_repo_name
				
				gitlab_repo_name=$(echo $gitlab_repo_name| sed -e "s/_/-/g")
				
				rm -rf new_tag
				docker rmi $docker_registry_ip/$gitlab_repo_name:$new_tag
				docker rmi $docker_registry_ip/init-cicd-workflow:$new_tag
			'''
        }
	}
	catch (e) {
		System.exit(1)
		if (status.trim().equalsIgnoreCase("null")) {
			sh '''echo "Error! Ask admin for build log." > statusFile'''
		}
	}
	finally {
		status = readFile 'statusFile'
		if (status.trim().equalsIgnoreCase("null")) {
			slackSend (color: "#73B839", message: "$JOB_NAME Pipeline Successful")
		}
		else{
			slackSend (color: "#F6260D", message: status.trim())
		}
	}
}